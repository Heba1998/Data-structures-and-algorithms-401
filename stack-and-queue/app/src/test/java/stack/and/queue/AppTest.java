/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

class AppTest {

//________________________Slack test_________________________________--
@Test void pushEmptyStack() {
    Stack<Integer> stackList = new Stack<>();
    assertEquals("The List is empty",stackList.pop());
    assertEquals("The List is empty",stackList.peek());
    stackList.push(2);
    assertEquals( "2 -> Null" , stackList.toString());
}


@Test void pushStack() {
    Stack<String> List = new Stack<>();
    List.push("A");
    List.push("B");
    List.push("C");
    assertEquals( "C -> B -> A -> Null" , List.toString());
}


    @Test void pop() {
        Stack<Integer> stackList = new Stack<>();
        stackList.push(1);
        stackList.push(2);
        stackList.push(3);
        assertEquals( 3 , stackList.pop() );
    }


    @Test void peek() {
        Stack<String> stackList = new Stack<>();
        stackList.push("A");
        stackList.push("B");
        stackList.push("C");
        stackList.pop();
        stackList.pop();
        assertEquals( "A" , stackList.peek());
    }

    @Test void emptyStack() {
        Stack<Integer> stackList = new Stack<>();
        stackList.push(1);
        stackList.push(2);
        stackList.push(3);
        stackList.pop();
        stackList.pop();
        stackList.pop();
        assertEquals( "null" , stackList.toString());
    }



    @Test void instantiateEmptyStack() {
        Stack<Integer> stackList = new Stack<>();
        assertEquals( "null" , stackList.toString());
    }




//________________________PseudoQueue test_________________________________

    @Test void PesudoQueue(){
        PseudoQueue<Integer> test=new PseudoQueue<>();
        test.enqueue(1);
        test.enqueue(2);
        test.enqueue(3);
        test.enqueue(4);
        assertEquals("Stack1= 4 -> 3 -> 2 -> 1 -> Null",test.toString());
    }

    @Test void PesudoQueue2(){
        PseudoQueue<Integer> test=new PseudoQueue<>();
        test.enqueue(1);
        test.enqueue(2);
        test.enqueue(3);
        test.enqueue(4);
        test.dequeue();
        assertEquals("Stack1= 4 -> 3 -> 2 -> Null",test.toString());
    }

    @Test void PesudoQueue3(){
        PseudoQueue<Integer> test=new PseudoQueue<>();
        test.enqueue(1);
        test.enqueue(2);
        test.enqueue(3);
        test.enqueue(4);
        test.dequeue();
        test.dequeue();
        test.dequeue();
        test.dequeue();
        assertEquals("The list is empty",test.toString());
    }

//________________________AnimalShelter test_________________________________
    @Test void AnimalShelter1(){
        AnimalShelter test = new AnimalShelter();
        test.enqueue(new Cat("Cat1"));
        test.enqueue(new Cat("Cat2"));
        test.enqueue(new Cat("Cat3"));
        test.dequeue("cat");
        test.dequeue("cat");
        test.dequeue("cat");
        assertEquals("\ncatList=null" +
                "\ndogList=null",test.toString());
    }


    @Test void AnimalShelter2(){
        AnimalShelter test = new AnimalShelter();
        test.enqueue(new Cat("Cat1"));
        test.enqueue(new Cat("Cat2"));
        test.enqueue(new Cat("Cat3"));
        test.dequeue("cat");
        test.dequeue("cat");


        test.enqueue(new Dog("Dog1"));
        test.enqueue(new Dog("Dog2"));
        test.enqueue(new Dog("Dog3"));
        test.dequeue("Dog");


        assertEquals("\ncatList=Cat3 -> Null" +
                "\ndogList=Dog1 -> Dog2 -> Dog3 -> Null",test.toString());
    }

}