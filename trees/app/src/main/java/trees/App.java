/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package trees;


public class App {

    public static void main(String[] args) {
        BinarySearchTree<Integer> binarySearchTree = new BinarySearchTree<>();
        binarySearchTree.Add(50);
        binarySearchTree.Add(10);
        binarySearchTree.Add(60);
        binarySearchTree.Add(30);
        binarySearchTree.Add(90);
        binarySearchTree.Add(80);


        System.out.println("Preorder result: " + binarySearchTree.preOrder(binarySearchTree.root));
        System.out.println("InOrder result: " + binarySearchTree.inOrder(binarySearchTree.root));
        System.out.println("Postorder result: " + binarySearchTree.postOrder(binarySearchTree.root));

        System.out.println("___________________________________________________________________________");
        System.out.println("The tree contains 90? " + binarySearchTree.contains(90));
        System.out.println("The tree contains 100? " + binarySearchTree.contains(100));
        System.out.println("The tree contains 50? " + binarySearchTree.contains(50));
        System.out.println("The tree contains 10? " + binarySearchTree.contains(10));

        System.out.println("___________________________________MaxValue________________________________________");
        System.out.println("The Maximum Value in a Binary Tree: " + binarySearchTree.MaxValue(binarySearchTree.root));


        System.out.println("\n\n___________________________________ Breadth First ________________________________________");
        System.out.println(binarySearchTree.BreadthFirst(binarySearchTree.root));


        System.out.println("\n\n___________________________________ Fizz-Buzz Tree ________________________________________\n");
        FizzBuzzTree tree = new FizzBuzzTree();
        tree.root = new KNode(1);
        tree.root.left = new KNode(3);
        tree.root.right = new KNode(2);
        tree.root.left.left = new KNode(5);
        tree.root.left.right = new KNode(88);
        tree.root.right.left = new KNode(15);
        tree.root.right.right = new KNode(50);
        System.out.println("Tree before Apply FizzBuzz functionðŸ‘‡\n");
        tree.printPreorderA(tree.root);
        System.out.println("\n\nTree After Apply FizzBuzz functionðŸ‘‡\n");
        tree.preorder(tree.root);
        System.out.println("\n_____________________________________________________________________________________________\n\n\n");
    }
}
